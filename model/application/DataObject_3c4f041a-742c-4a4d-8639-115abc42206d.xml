<archimate:DataObject
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Database"
    id="3c4f041a-742c-4a4d-8639-115abc42206d"
    documentation="Given that HCT MIS will be centrally hosted in the cloud there are 2 big ways in which the DB can be architected. Postgres has good support for schemas which enables us to consider these alternatives.&#xA;&#xA;- Assume one DB schema per business area, with a shared schema (if useful per requirements).&#xA;&#xA;-- Pros:&#xA;Data isolation, ensuring no data from business areas gets mixed even if there is a code level vulnerability.&#xA;Can still have a shared schema if needed for things that cut across business areas&#xA;The HQ dashboard would just be a different schema (literally with a different set of tables)&#xA;&#xA;-- Cons:&#xA;More moving parts to manage.&#xA;Running data migrations would require running it on many schemas&#xA;Makes HQ dashboard potentially a bit more involved since data has to be ETL'd from all the other schemas into it on a regular cadence.&#xA;&#xA;- One shared schema for all business areas.&#xA;&#xA;-- Pros:&#xA;Easier from an implementation perspective. All the data points to a &quot;business area&quot; model that then tells the application code how to enforce permissions.&#xA;Less moving parts and migrations run faster/consistently (easier to test in staging)&#xA;Could get away with implementing queries on the raw data itself for HQ Dashboard purposes.&#xA;&#xA;-- Cons:&#xA;Could lead to security issues since the data for each business area resides with mixed id's in the same schema/db tables.&#xA;Not easy to export all business area data if required.&#xA;Implementation Choices&#xA;This link (https://github.com/tomturner/django-tenants#why-schemas) (from django-tenants) gives a nice overview of choices as well. This library enables us to leverage Postgres Schemas efficiently without having to write a lot of custom code ourselves."/>
